<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://koileee.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://koileee.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-08-06T13:28:53-04:00</updated><id>https://koileee.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Operating Systems</title><link href="https://koileee.github.io/blog/2023/gios/" rel="alternate" type="text/html" title="Operating Systems"/><published>2023-08-03T09:56:00-04:00</published><updated>2023-08-03T09:56:00-04:00</updated><id>https://koileee.github.io/blog/2023/gios</id><content type="html" xml:base="https://koileee.github.io/blog/2023/gios/"><![CDATA[<p>For my second semester at OMSCS, I decided to take Graduate Intro to Operating System. The course has a class rating of 4.4 and covers concurrency, synchronization, memory management, networking and distributed services. The hands-on projects were written in C/C++ and focused on implementing multithreaded programming, inter-process communication, and distributed interactions via RPC.</p> <p>The course was not easy, and I spent around 20 hours or more every week working on assignments. However, looking back at this course, grinding through the projects really helped me build a solid foundation in system level programming and design. I was able to come out of the class with an A and a better understanding of multithreaded programming design, shared-memory interprocess communication mechanisms and working with with gRPC framework.</p> <p>Below are the projects that I worked on throughout the course.</p> <h2 id="projects">Projects</h2> <p>The first project involved designing and implement a multi-threaded server that serves static files and a multi-threaded client that acts as a load generator for the server. Both the server and client will be written in C and supported both IPv4 and IPv6.</p> <ul> <li><a href="https://koileee.github.io/projects/1_project/">Multithreaded File Server/Client</a></li> </ul> <p>The second project built upon the first project and implements the getfile server as a proxy server for other servers that hosts the actual files. The second part of the project also builds on implementing shared-memory interprocess communication. I used semaphores and POSIX shared-memory API to accomplish this task.</p> <ul> <li><a href="https://koileee.github.io/projects/2_project/">Proxy Shared Memory IPC</a></li> </ul> <p>The third project involves designing and implementing a simple distributed file system (DFS) using gRPC and protocol buffers. A weakly consistent synchronization system was used to manage cache consistency between multiple clients and a single server.</p> <ul> <li><a href="https://koileee.github.io/projects/3_project/">gRPC Distributed File System</a></li> </ul>]]></content><author><name></name></author><category term="masters-review"/><category term="OMSCS"/><summary type="html"><![CDATA[OMSCS review - Graduate Introduction to Operating Systems]]></summary></entry></feed>